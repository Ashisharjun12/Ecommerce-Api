openapi: 3.0.0
info:
  title: Ecommerce Backend API
  version: 1.0.0
  description: API documentation for the E-Commerce Backend application

paths:
  /api/v1/user/signUp:
    post:
      tags:
        - users
      summary: Sign up a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSignUp'
      responses:
        '200':
          description: User signed up successfully

  /api/v1/user/login:
    post:
      tags:
        - users
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User logged in successfully

  /api/v1/user/logout:
    get:
      tags:
        - users
      summary: Log out a user
      responses:
        '200':
          description: User logged out successfully

  /api/v1/user/forgotpassword:
    post:
      tags:
        - users
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPassword'
      responses:
        '200':
          description: Password reset email sent

  /api/v1/user/password/reset/{token}:
    post:
      tags:
        - users
      summary: Reset password
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          example: some-token-value
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '200':
          description: Password reset successfully

  /api/v1/user/userdashboard:
    get:
      tags:
        - users
      summary: Get logged-in user details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details retrieved successfully

  /api/v1/user/password/update:
    post:
      tags:
        - users
      summary: Update user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
      responses:
        '200':
          description: Password updated successfully

  /api/v1/user/userdashboard/update:
    post:
      tags:
        - users
      summary: Update user details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUserDetails'
      responses:
        '200':
          description: User details updated successfully

  /api/v1/user/admin/users:
    get:
      tags:
        - admin
      summary: Get all users (Admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users

  /api/v1/user/admin/user/{id}:
    get:
      tags:
        - admin
      summary: Get user by ID (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      responses:
        '200':
          description: User details retrieved successfully

    put:
      tags:
        - admin
      summary: Update user by ID (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateUser'
      responses:
        '200':
          description: User details updated successfully

    delete:
      tags:
        - admin
      summary: Delete user by ID (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      responses:
        '200':
          description: User deleted successfully

  /api/v1/user/manager/users:
    get:
      tags:
        - admin
      summary: Get all users (Manager)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users

  /api/v1/products:
    post:
      tags:
        - products
      summary: Create a new product
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product created successfully

    get:
      tags:
        - products
      summary: Get all products
      responses:
        '200':
          description: List of all products

  /api/v1/products/{id}:
    get:
      tags:
        - products
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      responses:
        '200':
          description: Product details retrieved successfully

    put:
      tags:
        - products
      summary: Update product by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully

    delete:
      tags:
        - products
      summary: Delete product by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      responses:
        '200':
          description: Product deleted successfully

  /api/v1/order/create:
    post:
      tags:
        - orders
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order created successfully

  /api/v1/order/{id}:
    get:
      tags:
        - orders
      summary: Get order by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      responses:
        '200':
          description: Order details retrieved successfully

  /api/v1/myorder:
    get:
      tags:
        - orders
      summary: Get logged-in user's orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user's orders

  /api/v1/admin/orders:
    get:
      tags:
        - admin
      summary: Get all orders (Admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all orders

  /api/v1/admin/order/{id}:
    put:
      tags:
        - admin
      summary: Update order by ID (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateOrder'
      responses:
        '200':
          description: Order status updated successfully

    delete:
      tags:
        - admin
      summary: Delete order by ID (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      responses:
        '200':
          description: Order deleted successfully

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserSignUp:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: password123
        avatar:
          type: string
          format: binary

    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: password123

    ForgotPassword:
      type: object
      properties:
        email:
          type: string
          example: johndoe@example.com

    ResetPassword:
      type: object
      properties:
        password:
          type: string
          example: newpassword123

    UpdatePassword:
      type: object
      properties:
        oldPassword:
          type: string
          example: oldpassword123
        newPassword:
          type: string
          example: newpassword123

    UpdateUserDetails:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        avatar:
          type: string
          format: binary

    AdminUpdateUser:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        role:
          type: string
          example: user

    Product:
      type: object
      properties:
        name:
          type: string
          example: Sample Product
        price:
          type: number
          example: 99.99
        description:
          type: string
          example: This is a sample product
        category:
          type: string
          example: Electronics
        stock:
          type: number
          example: 10
        images:
          type: array
          items:
            type: string
            format: binary

    Order:
      type: object
      properties:
        shippingInfo:
          type: object
          properties:
            address:
              type: string
              example: 123 Main St
            city:
              type: string
              example: Springfield
            phoneNo:
              type: string
              example: 1234567890
            postalcode:
              type: string
              example: 12345
            state:
              type: string
              example: IL
            country:
              type: string
              example: USA
        orderItems:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Product Name
              quantity:
                type: number
                example: 2
              image:
                type: string
                example: productImage.png
              price:
                type: number
                example: 99.99
              product:
                type: string
                example: 60c72b2f9b1e8b001c8e4d9f
        paymentInfo:
          type: object
          properties:
            id:
              type: string
              example: paymentId
        taxAmount:
          type: number
          example: 5.99
        shippingAmount:
          type: number
          example: 10.99
        totalAmount:
          type: number
          example: 116.97

    AdminUpdateOrder:
      type: object
      properties:
        orderStatus:
          type: string
          example: delivered
