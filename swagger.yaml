openapi: 3.0.0
info:
  title: Ecommerce Backend API
  version: 1.0.0
  description: API documentation for the E-Commerce Backend application



paths:
  /api/v1/user/signUp:
    post:
      tags:
        - users
      summary: Sign up a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Doe
                email:
                  type: string
                  example: john.doe@example.com
                password:
                  type: string
                  example: Password123
                photo:
                  type: string
                  format: binary
                  example: examplePhoto.png
      responses:
        '200':
          description: User signed up successfully

  /api/v1/user/login:
    post:
      tags:
        - users
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john.doe@example.com
                password:
                  type: string
                  example: Password123
      responses:
        '200':
          description: User logged in successfully

  /api/v1/user/logout:
    get:
      tags:
        - users
      summary: Log out a user
      responses:
        '200':
          description: User logged out successfully

  /api/v1/user/forgotpassword:
    post:
      tags:
        - users
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john.doe@example.com
      responses:
        '200':
          description: Password reset email sent

  /api/v1/user/password/reset/{token}:
    post:
      tags:
        - users
      summary: Reset password
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          example: some-token-value
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: NewPassword123
                confirmpassword:
                  type: string
                  example: NewPassword123
      responses:
        '200':
          description: Password reset successfully

  /api/v1/user/userdashboard:
    get:
      tags:
        - users
      summary: Get logged-in user details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details retrieved successfully

  /api/v1/user/password/update:
    post:
      tags:
        - users
      summary: Update user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldpassword:
                  type: string
                  example: OldPassword123
                newpassword:
                  type: string
                  example: NewPassword123
      responses:
        '200':
          description: Password updated successfully

  /api/v1/user/userdashboard/update:
    post:
      tags:
        - users
      summary: Update user details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Doe
                email:
                  type: string
                  example: john.doe@example.com
                photo:
                  type: string
                  format: binary
                  example: examplePhoto.png
      responses:
        '200':
          description: User details updated successfully

  /api/v1/user/admin/users:
    get:
      tags:
        - admin
      summary: Get all users (Admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users

  /api/v1/user/admin/user/{id}:
    get:
      tags:
        - admin
      summary: Get user by ID (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      responses:
        '200':
          description: User details retrieved successfully

    put:
      tags:
        - admin
      summary: Update user by ID (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Doe
                email:
                  type: string
                  example: john.doe@example.com
                role:
                  type: string
                  example: user
      responses:
        '200':
          description: User details updated successfully

    delete:
      tags:
        - admin
      summary: Delete user by ID (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 60c72b2f9b1e8b001c8e4d9f
      responses:
        '200':
          description: User deleted successfully

  /api/v1/user/manager/users:
    get:
      tags:
        - admin
      summary: Get all users (Manager)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
